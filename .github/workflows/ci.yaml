name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ARM64_DIR: target/linux/arm64
      AMD64_DIR: target/linux/amd64
      EXECUTABLE_NAME: wrapper_gen  # Remplacez par le nom de votre ex√©cutable

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install cross for cross-compilation
        run: |
          sudo apt-get update
          cargo install cross

      - name: Build for ARM64 (aarch64-unknown-linux-musl)
        run: |
          mkdir -p $ARM64_DIR
          cross build --target aarch64-unknown-linux-musl --release
          cp target/aarch64-unknown-linux-musl/release/$EXECUTABLE_NAME $ARM64_DIR/

      - name: Build for AMD64 (x86_64-unknown-linux-musl)
        run: |
          mkdir -p $AMD64_DIR
          cross build --target x86_64-unknown-linux-musl --release
          cp target/x86_64-unknown-linux-musl/release/$EXECUTABLE_NAME $AMD64_DIR/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        env:
          DOCKER_BUILDKIT: 1
        run: |
          docker buildx create --use
          docker buildx build --platform linux/arm64,linux/amd64 -t kerneltzo/command_runner:latest --push .